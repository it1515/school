/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package weaponeditor;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;

/**
 *
 * @author nesty
 */
public class Window extends javax.swing.JFrame {

    DefaultListModel model = new DefaultListModel();

    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
        Weapons.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroupWeapons = new javax.swing.ButtonGroup();
        popupMenu = new javax.swing.JPopupMenu();
        removeMenu = new javax.swing.JMenuItem();
        removeAllMenu = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenuItem();
        openFileMenu = new javax.swing.JMenuItem();
        saveFileMenu = new javax.swing.JMenuItem();
        name = new javax.swing.JTextField();
        MeleeWeaponButton = new javax.swing.JRadioButton();
        RangeWeaponButton = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Weapons = new javax.swing.JList<>();
        selectWeapon = new javax.swing.JComboBox<>();
        addButton = new javax.swing.JButton();

        removeMenu.setText("remove");
        removeMenu.setComponentPopupMenu(popupMenu);
        removeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMenuActionPerformed(evt);
            }
        });
        popupMenu.add(removeMenu);

        removeAllMenu.setText("remove all");
        removeAllMenu.setComponentPopupMenu(popupMenu);
        removeAllMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllMenuActionPerformed(evt);
            }
        });
        popupMenu.add(removeAllMenu);

        editMenu.setText("edit");
        editMenu.setComponentPopupMenu(popupMenu);
        editMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuActionPerformed(evt);
            }
        });
        popupMenu.add(editMenu);

        openFileMenu.setText("open file");
        openFileMenu.setComponentPopupMenu(popupMenu);
        popupMenu.add(openFileMenu);

        saveFileMenu.setText("save file");
        saveFileMenu.setComponentPopupMenu(popupMenu);
        popupMenu.add(saveFileMenu);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        buttonGroupWeapons.add(MeleeWeaponButton);
        MeleeWeaponButton.setSelected(true);
        MeleeWeaponButton.setText("Melee Weapon");
        MeleeWeaponButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MeleeWeaponButtonActionPerformed(evt);
            }
        });

        buttonGroupWeapons.add(RangeWeaponButton);
        RangeWeaponButton.setText("Range Weapon");
        RangeWeaponButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RangeWeaponButtonActionPerformed(evt);
            }
        });

        Weapons.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        Weapons.setComponentPopupMenu(popupMenu);
        jScrollPane1.setViewportView(Weapons);

        selectWeapon.setModel(new DefaultComboBoxModel(MeleeWeapon.Type.values()));
        selectWeapon.setSelectedItem(MeleeWeapon.Type.Sword);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, buttonGroupWeapons, org.jdesktop.beansbinding.ObjectProperty.create(), selectWeapon, org.jdesktop.beansbinding.BeanProperty.create("elements"));
        bindingGroup.addBinding(binding);

        selectWeapon.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                selectWeaponComponentAdded(evt);
            }
        });

        addButton.setText("ADD");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(name))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MeleeWeaponButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(selectWeapon, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(RangeWeaponButton))
                    .addComponent(addButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MeleeWeaponButton)
                    .addComponent(RangeWeaponButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectWeapon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addButton)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void MeleeWeaponButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MeleeWeaponButtonActionPerformed
        if (MeleeWeaponButton.isSelected() == true) {
            selectWeapon.removeAllItems();
            selectWeapon.setModel(new DefaultComboBoxModel(MeleeWeapon.Type.values()));
            selectWeapon.setSelectedItem(MeleeWeapon.Type.Sword);
        }
    }//GEN-LAST:event_MeleeWeaponButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (MeleeWeaponButton.isSelected() == true) {
            Weapon weapon = new MeleeWeapon(name.getText(), (MeleeWeapon.Type) selectWeapon.getSelectedItem());
            model.addElement(weapon);
        } else {
            Weapon weapon = new RangeWeapon(name.getText(), (RangeWeapon.Type) selectWeapon.getSelectedItem());
            model.addElement(weapon);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeAllMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllMenuActionPerformed
        model.removeAllElements();
    }//GEN-LAST:event_removeAllMenuActionPerformed

    private void removeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMenuActionPerformed
        int selectedIndex = Weapons.getSelectedIndex();
        if (selectedIndex != -1) {
            model.remove(selectedIndex);
        }
    }//GEN-LAST:event_removeMenuActionPerformed

    private void selectWeaponComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_selectWeaponComponentAdded

    }//GEN-LAST:event_selectWeaponComponentAdded

    private void RangeWeaponButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RangeWeaponButtonActionPerformed
        if (RangeWeaponButton.isSelected() == true) {
            selectWeapon.removeAllItems();
            selectWeapon.setModel(new DefaultComboBoxModel(RangeWeapon.Type.values()));
            selectWeapon.setSelectedItem(RangeWeapon.Type.Bow);
        }
    }//GEN-LAST:event_RangeWeaponButtonActionPerformed

    private void editMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuActionPerformed
        if(Weapons.getSelectedIndex() > -1){
            Weapon weapon = (Weapon)model.get(Weapons.getSelectedIndex());
//            WeaponDialog dialog = new WeaponDialog(this,true,weapon);
//            if(dialog.showDialog().equalsIgnoreCase("OK")){
//                model.setElementAt(dialog.getPerson(),Weapons.getSelectedIndex());
//            }
        }
    }//GEN-LAST:event_editMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton MeleeWeaponButton;
    private javax.swing.JRadioButton RangeWeaponButton;
    private javax.swing.JList<String> Weapons;
    private javax.swing.JButton addButton;
    private javax.swing.ButtonGroup buttonGroupWeapons;
    private javax.swing.JMenuItem editMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField name;
    private javax.swing.JMenuItem openFileMenu;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JMenuItem removeAllMenu;
    private javax.swing.JMenuItem removeMenu;
    private javax.swing.JMenuItem saveFileMenu;
    private javax.swing.JComboBox<String> selectWeapon;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
