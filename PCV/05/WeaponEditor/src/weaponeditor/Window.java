/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package weaponeditor;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author nesty
 */
public class Window extends javax.swing.JFrame {


    DefaultListModel model = new DefaultListModel();

    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
        Weapons.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroupWeapons = new javax.swing.ButtonGroup();
        popupMenu = new javax.swing.JPopupMenu();
        removeMenu = new javax.swing.JMenuItem();
        removeAllMenu = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenuItem();
        openFileMenu = new javax.swing.JMenuItem();
        saveFileMenu = new javax.swing.JMenuItem();
        name = new javax.swing.JTextField();
        MeleeWeaponButton = new javax.swing.JRadioButton();
        RangeWeaponButton = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Weapons = new javax.swing.JList<>();
        selectWeapon = new javax.swing.JComboBox<>();
        addButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        removeMenu.setText("remove");
        removeMenu.setComponentPopupMenu(popupMenu);
        removeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMenuActionPerformed(evt);
            }
        });
        popupMenu.add(removeMenu);

        removeAllMenu.setText("remove all");
        removeAllMenu.setComponentPopupMenu(popupMenu);
        removeAllMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllMenuActionPerformed(evt);
            }
        });
        popupMenu.add(removeAllMenu);

        editMenu.setText("edit");
        editMenu.setComponentPopupMenu(popupMenu);
        editMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuActionPerformed(evt);
            }
        });
        popupMenu.add(editMenu);

        openFileMenu.setText("open file");
        openFileMenu.setComponentPopupMenu(popupMenu);
        openFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuActionPerformed(evt);
            }
        });
        popupMenu.add(openFileMenu);

        saveFileMenu.setText("save file");
        saveFileMenu.setComponentPopupMenu(popupMenu);
        saveFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileMenuActionPerformed(evt);
            }
        });
        popupMenu.add(saveFileMenu);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        buttonGroupWeapons.add(MeleeWeaponButton);
        MeleeWeaponButton.setSelected(true);
        MeleeWeaponButton.setText("Melee Weapon");
        MeleeWeaponButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MeleeWeaponButtonActionPerformed(evt);
            }
        });

        buttonGroupWeapons.add(RangeWeaponButton);
        RangeWeaponButton.setText("Range Weapon");
        RangeWeaponButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RangeWeaponButtonActionPerformed(evt);
            }
        });

        Weapons.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        Weapons.setComponentPopupMenu(popupMenu);
        jScrollPane1.setViewportView(Weapons);

        selectWeapon.setModel(new DefaultComboBoxModel(MeleeWeapon.Type.values()));
        selectWeapon.setSelectedItem(MeleeWeapon.Type.Sword);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, buttonGroupWeapons, org.jdesktop.beansbinding.ObjectProperty.create(), selectWeapon, org.jdesktop.beansbinding.BeanProperty.create("elements"));
        bindingGroup.addBinding(binding);

        selectWeapon.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                selectWeaponComponentAdded(evt);
            }
        });

        addButton.setText("ADD");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Název zbraně");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(name))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(MeleeWeaponButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(selectWeapon, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(RangeWeaponButton))
                            .addComponent(addButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MeleeWeaponButton)
                    .addComponent(RangeWeaponButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectWeapon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addButton)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void MeleeWeaponButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MeleeWeaponButtonActionPerformed
        if (MeleeWeaponButton.isSelected() == true) {
            selectWeapon.removeAllItems();
            selectWeapon.setModel(new DefaultComboBoxModel(MeleeWeapon.Type.values()));
            selectWeapon.setSelectedItem(MeleeWeapon.Type.Sword);
        }
    }//GEN-LAST:event_MeleeWeaponButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        Weapon.Rarity rarity = Weapon.Rarity.getRandomRarity();
        if (MeleeWeaponButton.isSelected() == true) {
            Weapon weapon = new MeleeWeapon(name.getText(), (MeleeWeapon.Type) selectWeapon.getSelectedItem(), rarity);
            model.addElement(weapon);
        } else {
            Weapon weapon = new RangeWeapon(name.getText(), (RangeWeapon.Type) selectWeapon.getSelectedItem(), rarity);
            model.addElement(weapon);
        }
    }//GEN-LAST:event_addButtonActionPerformed
    
    private void removeAllMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllMenuActionPerformed
        model.removeAllElements();
    }//GEN-LAST:event_removeAllMenuActionPerformed

    private void removeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMenuActionPerformed
        int selectedIndex = Weapons.getSelectedIndex();
        if (selectedIndex != -1) {
            model.remove(selectedIndex);
        }
    }//GEN-LAST:event_removeMenuActionPerformed

    private void selectWeaponComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_selectWeaponComponentAdded

    }//GEN-LAST:event_selectWeaponComponentAdded

    private void RangeWeaponButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RangeWeaponButtonActionPerformed
        if (RangeWeaponButton.isSelected() == true) {
            selectWeapon.removeAllItems();
            selectWeapon.setModel(new DefaultComboBoxModel(RangeWeapon.Type.values()));
            selectWeapon.setSelectedItem(RangeWeapon.Type.Bow);
        }
    }//GEN-LAST:event_RangeWeaponButtonActionPerformed

    private void editMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuActionPerformed
        if(Weapons.getSelectedIndex() > -1){
            int i = Weapons.getSelectedIndex();
            if(model.get(i).getClass().getSimpleName().equals("MeleeWeapon")){
                MeleeWeapon weapon = (MeleeWeapon)model.get(Weapons.getSelectedIndex());
                WeaponDialog dialog = new WeaponDialog(this,true,weapon);
                if(dialog.showDialog("Melee Weapon").equalsIgnoreCase("OK")){
                    model.setElementAt(dialog.getMeleeWeapon(),Weapons.getSelectedIndex());
                }
            }
            if(model.get(i).getClass().getSimpleName().equals("RangeWeapon")){
                RangeWeapon weapon = (RangeWeapon)model.get(Weapons.getSelectedIndex());
                WeaponDialog dialog = new WeaponDialog(this,true,weapon);
                if(dialog.showDialog("Range Weapon").equalsIgnoreCase("OK")){
                    model.setElementAt(dialog.getRangeWeapon(),Weapons.getSelectedIndex());
                }
            }
        }
    }//GEN-LAST:event_editMenuActionPerformed

    private void openFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuActionPerformed
//        try (BufferedReader br = new BufferedReader(new FileReader("soubor.txt")))
//        {
//                String s;
//                int i = 0;
//                while ((s = br.readLine()) != null)
//                {
//                        if(i>0)
//                        {
//                            String[] attr = s.split(";");
//                            Weapon weapon;
//                            if (attr[0].equalsIgnoreCase("MeleeWeapon")) {
//                                weapon = new MeleeWeapon(attr[2]);
//                                if(attr[1].equalsIgnoreCase("Sword"))
//                                    weapon.setType(MeleeWeapon.Type.Sword);
//                                else if(attr[1].equalsIgnoreCase("Axe"))
//                                    weapon.setType(MeleeWeapon.Type.Axe);
//                                else if(attr[1].equalsIgnoreCase("Blade"))
//                                    weapon.setType(MeleeWeapon.Type.Blade);
//                                else if(attr[1].equalsIgnoreCase("Mace"))
//                                    weapon.setType(MeleeWeapon.Type.Mace);
//                                else if(attr[1].equalsIgnoreCase("Hammer"))
//                                    weapon.setType(MeleeWeapon.Type.Hammer);
//                                else if(attr[1].equalsIgnoreCase("Spear"))
//                                    weapon.setType(MeleeWeapon.Type.Spear);
//                                else if(attr[1].equalsIgnoreCase("Dagger"))
//                                    weapon.setType(MeleeWeapon.Type.Dagger);
//                            } else {
//                                weapon = new RangeWeapon(attr[2]);
//                                if(attr[1].equalsIgnoreCase("Bow"))
//                                    weapon.setType(RangeWeapon.Type.Bow);
//                                else if(attr[1].equalsIgnoreCase("Crossbow"))
//                                    weapon.setType(RangeWeapon.Type.Crossbow);
//                                else if(attr[1].equalsIgnoreCase("Pistol"))
//                                    weapon.setType(RangeWeapon.Type.Pistol);
//                                else if(attr[1].equalsIgnoreCase("Smg"))
//                                    weapon.setType(RangeWeapon.Type.Smg);
//                                else if(attr[1].equalsIgnoreCase("Assult"))
//                                    weapon.setType(RangeWeapon.Type.Assult);
//                                else if(attr[1].equalsIgnoreCase("Sniper"))
//                                    weapon.setType(RangeWeapon.Type.Sniper);
//                                else if(attr[1].equalsIgnoreCase("RocketLauncher"))
//                                    weapon.setType(RangeWeapon.Type.RocketLauncher);
//                            }
//                            
//                                    
//                            weapon.setDmg(Integer.parseInt(attr[3]));
//                            if(attr[4].equalsIgnoreCase("Common"))
//                                weapon.setRarity(Weapon.Rarity.Common);
//                            else if(attr[4].equalsIgnoreCase("Uncommon"))
//                                weapon.setRarity(Weapon.Rarity.Uncommon);
//                            else if(attr[4].equalsIgnoreCase("Rare"))
//                                weapon.setRarity(Weapon.Rarity.Rare);
//                            else if(attr[4].equalsIgnoreCase("Epic"))
//                                weapon.setRarity(Weapon.Rarity.Epic);
//                            else if(attr[4].equalsIgnoreCase("Legendary"))
//                                weapon.setRarity(Weapon.Rarity.Legendary);
//                            model.addElement(weapon);
//                        }
//                        i++;
//                }
//        }
//        catch (Exception e)
//        {
//            System.err.println("Chyba při četení ze souboru.");
//        }
        JSONParser parser = new JSONParser();
        try (BufferedReader br = new BufferedReader(new FileReader("myJSON.json"))){
            Object obj = parser.parse(new FileReader("myJSON.json"));
            JSONObject jsonAObject = (JSONObject) obj;
            JSONArray weaponsAttributes = (JSONArray) jsonAObject.get("weapons");
            for (Object weaponsAttribute : weaponsAttributes) {
                JSONObject jsonObject = (JSONObject) weaponsAttribute;
                String clazz = (String) jsonObject.get("clazz");
                String name = (String) jsonObject.get("name");
                String type = (String) jsonObject.get("type");
                int dmg = Integer.parseInt(jsonObject.get("dmg").toString());
                int attackspeed = Integer.parseInt(jsonObject.get("attackspeed").toString());
                int range = Integer.parseInt(jsonObject.get("range").toString());
                int durability = Integer.parseInt(jsonObject.get("durability").toString());   
                String rarity = (String) jsonObject.get("rarity");
                Weapon weapon;
                if(clazz.equalsIgnoreCase("MeleeWeapon")){
                    int lenght = Integer.parseInt(jsonObject.get("lenght").toString());
                    weapon = new MeleeWeapon(name,lenght);      
                    weapon.setType(MeleeWeapon.Type.valueOf(type));
                } else {
                    int accuracy = Integer.parseInt(jsonObject.get("accuracy").toString());
                    int stability = Integer.parseInt(jsonObject.get("stability").toString());
                    int ammoCapacity = Integer.parseInt(jsonObject.get("ammoCapacity").toString());
                    int magazineCapacity = Integer.parseInt(jsonObject.get("magazineCapacity").toString());
                    weapon = new RangeWeapon(name,accuracy,stability,ammoCapacity,magazineCapacity);
                    weapon.setType(RangeWeapon.Type.valueOf(type));
            }      
            weapon.setRarity(Weapon.Rarity.valueOf(rarity));
            weapon.setDmg(dmg);
            weapon.setAttackspeed(attackspeed);
            weapon.setRange(range);
            weapon.setDurability(durability);
            model.addElement(weapon);
            }
        }
        catch(Exception e) 
        {
            System.err.println("Chyba při četení ze souboru.");
        }
    }//GEN-LAST:event_openFileMenuActionPerformed

    private void saveFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileMenuActionPerformed
//        try (BufferedWriter bw = new BufferedWriter(new FileWriter("soubor.txt")))
//        {
//                bw.write("class;type;name;dmg;rarity");
//                bw.newLine();
//                
//                for(int i=0; i<model.getSize();i++)
//                {                    
//                    if(model.get(i).getClass().getSimpleName().equals("MeleeWeapon")){
//                        MeleeWeapon weapon = (MeleeWeapon)model.get(i);
//                        String output = weapon.getClass().getSimpleName() + ";"
//                                + weapon.getType() + ";"
//                                + weapon.getName() + ";"
//                                + weapon.getDmg() + ";"
//                                + weapon.getRarity();
//                        bw.write(output);
//                    }else{
//                        RangeWeapon weapon2 = (RangeWeapon)model.get(i);
//                        String output2 = weapon2.getClass().getSimpleName() + ";"
//                                + weapon2.getType() + ";"
//                                + weapon2.getName() + ";"
//                                + weapon2.getDmg() + ";"
//                                + weapon2.getRarity();
//                        bw.write(output2);
//                    }
//                    bw.newLine();
//                    
////                    RangeWeapon weapon2 = (RangeWeapon)model.get(i);
////                    String output2 = weapon2.getClass().getSimpleName() + ";"
////                            + weapon2.getType() + ";"
////                            + weapon2.getName() + ";"
////                            + weapon2.getDmg() + ";"
////                            + weapon2.getRarity();
////                    bw.write(output2);
////                    bw.newLine();
//                }
//                bw.flush();
//        }catch (Exception e)
//        {
//                System.err.println("Do souboru se nepovedlo zapsat.");
//        }
        try(BufferedWriter file = new BufferedWriter(new FileWriter("myJSON.json")))
        {
            JSONObject obj = new JSONObject();
            JSONArray list = new JSONArray();
            file.write("{\"weapons\":[");
            for(int i=0; i<model.getSize();i++)
            {                    
                if(model.get(i).getClass().getSimpleName().equals("MeleeWeapon")){
                    MeleeWeapon weapon = (MeleeWeapon)model.get(i);
                    obj.put("clazz",weapon.getClass().getSimpleName());
                    obj.put("type",weapon.getType().toString());
//                    obj.put("name",weapon.getName());
//                    obj.put("dmg",(int) weapon.getDmg());
//                    obj.put("attackspeed",(int) weapon.getAttackspeed());
//                    obj.put("range",(int) weapon.getRange());
//                    obj.put("durability",(int) weapon.getDurability());
//                    obj.put("rarity",weapon.getRarity().toString());
//                    obj.put("lenght",(int) weapon.getLength());
                }else{
                    RangeWeapon weapon2 = (RangeWeapon)model.get(i);
                    obj.put("clazz",weapon2.getClass().getSimpleName());
                    obj.put("type",weapon2.getType().toString());
                    obj.put("name",weapon2.getName());
                    obj.put("dmg",(int) weapon2.getDmg());
                    obj.put("attackspeed",(int) weapon2.getAttackspeed());
                    obj.put("range",(int) weapon2.getRange());
                    obj.put("durability",(int) weapon2.getDurability());
                    obj.put("rarity",weapon2.getRarity().toString());
                    obj.put("accuracy",weapon2.getAccuracy());
                    obj.put("stability",weapon2.getStability());
                    obj.put("ammoCapacity",weapon2.getAmmoCapacity());
                    obj.put("magazineCapacity",weapon2.getMagazineCapacity());
                }
                file.write(obj.toJSONString());
                if(i<model.getSize()-1)
                    file.write(",");
                file.newLine();
            }
//            file.write("{\"weapons\":"+list.toJSONString()+"}");             
            file.write("]}");
            file.flush();
        }   
        catch (IOException e)
        {
            System.err.println("Do souboru se nepovedlo zapsat.");
        }
    }//GEN-LAST:event_saveFileMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton MeleeWeaponButton;
    private javax.swing.JRadioButton RangeWeaponButton;
    private javax.swing.JList<String> Weapons;
    private javax.swing.JButton addButton;
    private javax.swing.ButtonGroup buttonGroupWeapons;
    private javax.swing.JMenuItem editMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField name;
    private javax.swing.JMenuItem openFileMenu;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JMenuItem removeAllMenu;
    private javax.swing.JMenuItem removeMenu;
    private javax.swing.JMenuItem saveFileMenu;
    private javax.swing.JComboBox<String> selectWeapon;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
